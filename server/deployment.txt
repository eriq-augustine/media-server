There are four main components to the media server.
   1. The webserver that servers /static/, /media/, /cache/.
      It also acts as a reverse proxy for gunicorn.
      I use nginx. A sample conf is at conf/nginx.conf.
   2. The webserver for django.
      This is the server that specializes in running multi-threaded
      python apps using mod_wsgi.
      I use gunicorn. bin/gunicorn_start.sh launches gunicorn.
      Ideally, gunicorn will be controled by some watchdog daemon
      like systemd. There are sample confs in conf.
   3. The encoding process. This is a standalone python process that
      handles encodes. We have had many problems with gunicorn
      killing off our encode thread, so it is now standalone.
      bin/start_encode.sh runs the encode process.
   4. The websocket server.
      This establishes a connection to active clients and
      sends updates about the encode and cache.
      This can be run from bin/start_websocket.sh.

Before invoking 2 - 4, you should be sure to be in the virtualenv
(source bin/active).

Starting the media server manually:
   0. (I assume the server is configured properly)
   1. su media (or whatever user you wish to run under)
   2. source bin/activate
   3. bin/runServer.sh

Configuration:
   You will need to reverse proxy the gunicorn django server, as well as serve the static and media files.
   I use nginx. The configuration is in config/nginx.conf.
   Both the 'media' and 'static/mediaserver' are symlinks to the actual data.
   I then server both of those directories (symlinks) via nginx.

   Logs from gunicorn and nginx are all sent to the logs directory.

References:
   stack: http://michal.karzynski.pl/blog/2013/06/09/django-nginx-gunicorn-virtualenv-supervisor/
   additional stack: http://goodcode.io/blog/django-nginx-gunicorn/
   systemd: http://blog.serverbeep.com/tag/gunicorn/
